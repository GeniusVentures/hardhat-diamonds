/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockDiamond,
  MockDiamondInterface,
} from "../../MockDiamond.sol/MockDiamond";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum MockDiamond.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct MockDiamond.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum MockDiamond.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct MockDiamond.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "facetFunctionSelectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct MockDiamond.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600480546001600160a01b0319163317905561168d806100326000396000f3fe6080604052600436106100745760003560e01c80637a0ed6271161004e5780637a0ed6271461018d5780638da5cb5b146101af578063adfca15e146101e7578063cdffacc6146102145761007b565b806301ffc9a7146101165780631f931c1c1461014b57806352ef6b2c1461016b5761007b565b3661007b57005b600080356001600160e01b0319168152602081905260409020546001600160a01b0316806100f05760405162461bcd60e51b815260206004820152601760248201527f46756e6374696f6e20646f6573206e6f7420657869737400000000000000000060448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e80801561010f573d6000f35b3d6000fd5b005b34801561012257600080fd5b50610136610131366004610fac565b610254565b60405190151581526020015b60405180910390f35b34801561015757600080fd5b5061011461016636600461102e565b6102a6565b34801561017757600080fd5b5061018061050a565b60405161014291906110e0565b34801561019957600080fd5b506101a261056c565b604051610142919061112d565b3480156101bb57600080fd5b506004546101cf906001600160a01b031681565b6040516001600160a01b039091168152602001610142565b3480156101f357600080fd5b506102076102023660046111e2565b610676565b60405161014291906111fd565b34801561022057600080fd5b506101cf61022f366004610fac565b6001600160e01b0319166000908152602081905260409020546001600160a01b031690565b60006001600160e01b031982166301ffc9a760e01b148061028557506001600160e01b031982166307e4c70760e21b145b806102a057506001600160e01b031982166348e2b09360e01b145b92915050565b6004546001600160a01b0316331461030a5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084016100e7565b60005b848110156103e15760008686838181106103295761032961123f565b905060200281019061033b9190611255565b610344906112f4565b905060008160200151600281111561035e5761035e6113cb565b0361037a5761037581600001518260400151610808565b6103d8565b600181602001516002811115610392576103926113cb565b036103a95761037581600001518260400151610aeb565b6002816020015160028111156103c1576103c16113cb565b036103d8576103d881600001518260400151610cde565b5060010161030d565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738585858585604051610419959493929190611452565b60405180910390a16001600160a01b0383161561050357600080846001600160a01b0316848460405161044d92919061157f565b600060405180830381855af49150503d8060008114610488576040519150601f19603f3d011682016040523d82523d6000602084013e61048d565b606091505b509150915081610500578051156104b8578060405162461bcd60e51b81526004016100e7919061158f565b60405162461bcd60e51b815260206004820152601d60248201527f4469616d6f6e6420696e697469616c697a6174696f6e206661696c656400000060448201526064016100e7565b50505b5050505050565b6060600380548060200260200160405190810160405280929190818152602001828054801561056257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610544575b5050505050905090565b6003546060908067ffffffffffffffff81111561058b5761058b611275565b6040519080825280602002602001820160405280156105d157816020015b6040805180820190915260008152606060208201528152602001906001900390816105a95790505b50915060005b81811015610671576000600382815481106105f4576105f461123f565b9060005260206000200160009054906101000a90046001600160a01b03169050808483815181106106275761062761123f565b60209081029190910101516001600160a01b03909116905261064881610676565b84838151811061065a5761065a61123f565b6020908102919091018101510152506001016105d7565b505090565b600154606090600090815b8181101561070757846001600160a01b0316600080600184815481106106a9576106a961123f565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b03191683528201929092526040019020546001600160a01b0316036106ff57826106fb816115f4565b9350505b600101610681565b508167ffffffffffffffff81111561072157610721611275565b60405190808252806020026020018201604052801561074a578160200160208202803683370190505b5092506000805b828110156107ff5760006001828154811061076e5761076e61123f565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b031981168352908290526040909120549091506001600160a01b038881169116036107f657808684815181106107cf576107cf61123f565b6001600160e01b031990921660209283029190910190910152826107f2816115f4565b9350505b50600101610751565b50505050919050565b600081511161084f5760405162461bcd60e51b8152602060048201526013602482015272139bc81cd95b1958dd1bdc9cc81d1bc8185919606a1b60448201526064016100e7565b6001600160a01b0382166108b55760405162461bcd60e51b815260206004820152602760248201527f4164642066756e6374696f6e3a2066616365742063616e2774206265206164646044820152667265737328302960c81b60648201526084016100e7565b6001546001600160a01b0383811660009081526002602052604090205416610972576040805180820182526001600160a01b0380861680835261ffff808616602080860191825260008481526002909152958620945185549151909216600160a01b026001600160b01b03199091169190931617919091179091556003805460018101825592527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180546001600160a01b03191690911790555b60005b8251811015610ae55760008382815181106109925761099261123f565b6020908102919091018101516001600160e01b031981166000908152918290526040909120549091506001600160a01b03168015610a125760405162461bcd60e51b815260206004820152601760248201527f46756e6374696f6e20616c72656164792065786973747300000000000000000060448201526064016100e7565b6040805180820182526001600160a01b03808916825261ffff80881660208085019182526001600160e01b03198816600090815290819052948520935184549151909216600160a01b026001600160b01b031990911691909216171790556001805480820182559152600881047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805460e085901c60046007909416939093026101000a92830263ffffffff909302191691909117905583610ad48161160d565b945050600190920191506109759050565b50505050565b6000815111610b3c5760405162461bcd60e51b815260206004820152601760248201527f4e6f2073656c6563746f727320746f207265706c61636500000000000000000060448201526064016100e7565b6001600160a01b038216610ba65760405162461bcd60e51b815260206004820152602b60248201527f5265706c6163652066756e6374696f6e3a2066616365742063616e277420626560448201526a206164647265737328302960a81b60648201526084016100e7565b60005b8151811015610cd9576000828281518110610bc657610bc661123f565b6020908102919091018101516001600160e01b031981166000908152918290526040909120549091506001600160a01b031680610c3e5760405162461bcd60e51b8152602060048201526016602482015275119d5b98dd1a5bdb88191bd95cdb89dd08195e1a5cdd60521b60448201526064016100e7565b846001600160a01b0316816001600160a01b031603610c9f5760405162461bcd60e51b815260206004820152601c60248201527f5265706c6163652066756e6374696f6e3a2073616d652066616365740000000060448201526064016100e7565b506001600160e01b031916600090815260208190526040902080546001600160a01b0319166001600160a01b038516179055600101610ba9565b505050565b6000815111610d285760405162461bcd60e51b81526020600482015260166024820152754e6f2073656c6563746f727320746f2072656d6f766560501b60448201526064016100e7565b60005b8151811015610cd9576000828281518110610d4857610d4861123f565b6020908102919091018101516001600160e01b0319811660009081528083526040908190208151808301909252546001600160a01b038116808352600160a01b90910461ffff169382019390935290925090610ddf5760405162461bcd60e51b8152602060048201526016602482015275119d5b98dd1a5bdb88191bd95cdb89dd08195e1a5cdd60521b60448201526064016100e7565b846001600160a01b031681600001516001600160a01b031614610e445760405162461bcd60e51b815260206004820152601c60248201527f52656d6f76652066756e6374696f6e3a2077726f6e672066616365740000000060448201526064016100e7565b60208101516001805461ffff90921691600091610e609161162e565b9050808214610f1d57600060018281548110610e7e57610e7e61123f565b90600052602060002090600891828204019190066004029054906101000a900460e01b90508060018481548110610eb757610eb761123f565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031992909216825281905260409020805461ffff60a01b1916600160a01b61ffff8516021790555b6001805480610f2e57610f2e611641565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b03199095168152938490525050604090912080546001600160b01b031916905550600101610d2b565b80356001600160e01b031981168114610fa757600080fd5b919050565b600060208284031215610fbe57600080fd5b610fc782610f8f565b9392505050565b80356001600160a01b0381168114610fa757600080fd5b60008083601f840112610ff757600080fd5b50813567ffffffffffffffff81111561100f57600080fd5b60208301915083602082850101111561102757600080fd5b9250929050565b60008060008060006060868803121561104657600080fd5b853567ffffffffffffffff8082111561105e57600080fd5b818801915088601f83011261107257600080fd5b81358181111561108157600080fd5b8960208260051b850101111561109657600080fd5b602083019750809650506110ac60208901610fce565b945060408801359150808211156110c257600080fd5b506110cf88828901610fe5565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b818110156111215783516001600160a01b0316835292840192918401916001016110fc565b50909695505050505050565b600060208083018184528085518083526040925060408601915060408160051b8701018488016000805b848110156111d357898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156111be5783516001600160e01b0319168252928b019260019290920191908b0190611194565b50978a01979550505091870191600101611157565b50919998505050505050505050565b6000602082840312156111f457600080fd5b610fc782610fce565b6020808252825182820181905260009190848201906040850190845b818110156111215783516001600160e01b03191683529284019291840191600101611219565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261126b57600080fd5b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156112ae576112ae611275565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156112dd576112dd611275565b604052919050565b803560038110610fa757600080fd5b60006060823603121561130657600080fd5b61130e61128b565b61131783610fce565b815260206113268185016112e5565b81830152604084013567ffffffffffffffff8082111561134557600080fd5b9085019036601f83011261135857600080fd5b81358181111561136a5761136a611275565b8060051b915061137b8483016112b4565b818152918301840191848101903684111561139557600080fd5b938501935b838510156113ba576113ab85610f8f565b8252938501939085019061139a565b604087015250939695505050505050565b634e487b7160e01b600052602160045260246000fd5b8183526000602080850194508260005b8581101561141e576001600160e01b031961140b83610f8f565b16875295820195908201906001016113f1565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b81101561154c57878303607f190184528135368e9003605e1901811261149757600080fd5b8d016001600160a01b036114aa82610fce565b16845260206114ba8183016112e5565b600381106114d857634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e190181126114f557600080fd5b90920181810192903567ffffffffffffffff81111561151357600080fd5b80891b360384131561152457600080fd5b89828801526115368a880182866113e1565b9783019796505050929092019150600101611471565b50506001600160a01b0389166020870152858103604087015261157081888a611429565b9b9a5050505050505050505050565b8183823760009101908152919050565b60006020808352835180602085015260005b818110156115bd578581018301518582016040015282016115a1565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b600060018201611606576116066115de565b5060010190565b600061ffff808316818103611624576116246115de565b6001019392505050565b818103818111156102a0576102a06115de565b634e487b7160e01b600052603160045260246000fdfea26469706673582212202d5fffb0237dce17ecddfcd28b3ae9f3b9e4929b819990c1d96b2b13e846dd2264736f6c63430008180033";

type MockDiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDiamond__factory extends ContractFactory {
  constructor(...args: MockDiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockDiamond & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockDiamond__factory {
    return super.connect(runner) as MockDiamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDiamondInterface {
    return new Interface(_abi) as MockDiamondInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockDiamond {
    return new Contract(address, _abi, runner) as unknown as MockDiamond;
  }
}
