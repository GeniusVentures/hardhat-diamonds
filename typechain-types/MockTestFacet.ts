/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MockTestFacet {
  export type TestStructStruct = {
    id: BigNumberish;
    name: string;
    active: boolean;
  };

  export type TestStructStructOutput = [
    id: bigint,
    name: string,
    active: boolean
  ] & { id: bigint; name: string; active: boolean };
}

export interface MockTestFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "arrayFunction"
      | "complexFunction"
      | "getTestValue"
      | "getUserValue"
      | "multiReturnFunction"
      | "payableFunction"
      | "revertingFunction"
      | "setUserValue"
      | "structFunction"
      | "testFunction1"
      | "testFunction2"
      | "testFunction3"
      | "viewFunction"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TestEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "arrayFunction",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "complexFunction",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTestValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multiReturnFunction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payableFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertingFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "structFunction",
    values: [MockTestFacet.TestStructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testFunction1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFunction2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testFunction3",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewFunction",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "arrayFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complexFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiReturnFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payableFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertingFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "structFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFunction1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFunction2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFunction3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewFunction",
    data: BytesLike
  ): Result;
}

export namespace TestEventEvent {
  export type InputTuple = [message: string, value: BigNumberish];
  export type OutputTuple = [message: string, value: bigint];
  export interface OutputObject {
    message: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockTestFacet extends BaseContract {
  connect(runner?: ContractRunner | null): MockTestFacet;
  waitForDeployment(): Promise<this>;

  interface: MockTestFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  arrayFunction: TypedContractMethod<
    [_numbers: BigNumberish[]],
    [bigint],
    "view"
  >;

  complexFunction: TypedContractMethod<
    [_number: BigNumberish, _text: string, _flag: boolean],
    [string],
    "nonpayable"
  >;

  getTestValue: TypedContractMethod<[], [bigint], "view">;

  getUserValue: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  multiReturnFunction: TypedContractMethod<
    [_input: BigNumberish],
    [[bigint, string, boolean]],
    "view"
  >;

  payableFunction: TypedContractMethod<[], [bigint], "payable">;

  revertingFunction: TypedContractMethod<[], [void], "view">;

  setUserValue: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  structFunction: TypedContractMethod<
    [_struct: MockTestFacet.TestStructStruct],
    [boolean],
    "view"
  >;

  testFunction1: TypedContractMethod<[], [string], "view">;

  testFunction2: TypedContractMethod<
    [_value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  testFunction3: TypedContractMethod<[_message: string], [string], "view">;

  viewFunction: TypedContractMethod<[_input: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "arrayFunction"
  ): TypedContractMethod<[_numbers: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "complexFunction"
  ): TypedContractMethod<
    [_number: BigNumberish, _text: string, _flag: boolean],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTestValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserValue"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "multiReturnFunction"
  ): TypedContractMethod<
    [_input: BigNumberish],
    [[bigint, string, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "payableFunction"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "revertingFunction"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "setUserValue"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "structFunction"
  ): TypedContractMethod<
    [_struct: MockTestFacet.TestStructStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "testFunction1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "testFunction2"
  ): TypedContractMethod<[_value: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "testFunction3"
  ): TypedContractMethod<[_message: string], [string], "view">;
  getFunction(
    nameOrSignature: "viewFunction"
  ): TypedContractMethod<[_input: BigNumberish], [bigint], "view">;

  getEvent(
    key: "TestEvent"
  ): TypedContractEvent<
    TestEventEvent.InputTuple,
    TestEventEvent.OutputTuple,
    TestEventEvent.OutputObject
  >;

  filters: {
    "TestEvent(string,uint256)": TypedContractEvent<
      TestEventEvent.InputTuple,
      TestEventEvent.OutputTuple,
      TestEventEvent.OutputObject
    >;
    TestEvent: TypedContractEvent<
      TestEventEvent.InputTuple,
      TestEventEvent.OutputTuple,
      TestEventEvent.OutputObject
    >;
  };
}
